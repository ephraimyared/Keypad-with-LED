
keypad with LED.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ec  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         000006cc  00000000  00000000  00000140  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000090  00000000  00000000  0000080c  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_aranges 00000020  00000000  00000000  0000089c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000001b  00000000  00000000  000008bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000082  00000000  00000000  000008d7  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000004e  00000000  00000000  00000959  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000241  00000000  00000000  000009a7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000020  00000000  00000000  00000be8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000000bc  00000000  00000000  00000c08  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_pubtypes 0000001e  00000000  00000000  00000cc4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 74 00 	jmp	0xe8	; 0xe8 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:

#include <avr/io.h>

int main(void)
{
    DDRB = 0b11111111; // LED
  6c:	8f ef       	ldi	r24, 0xFF	; 255
  6e:	87 bb       	out	0x17, r24	; 23
    DDRC = 0b11111111; // Keypad Output
  70:	84 bb       	out	0x14, r24	; 20
    DDRD = 0b00000000; // Keypad input
  72:	11 ba       	out	0x11, r1	; 17

    while (1)
    {
        PORTC = 0b00000100;
  74:	24 e0       	ldi	r18, 0x04	; 4
        if (PIND & (1 << PD0))
        {
            PORTB = 1;
  76:	91 e0       	ldi	r25, 0x01	; 1
        {
            PORTB = 7;
        }
        else if (PIND & (1 << PD3))
        {
            PORTB = '*';
  78:	aa e2       	ldi	r26, 0x2A	; 42
        {
            PORTB = 4;
        }
        else if (PIND & (1 << PD2))
        {
            PORTB = 7;
  7a:	e7 e0       	ldi	r30, 0x07	; 7
        else if (PIND & (1 << PD3))
        {
            PORTB = '*';
        }
		
		                     PORTC = 0b00000010;
  7c:	82 e0       	ldi	r24, 0x02	; 2
                               {
                                  PORTB = 5;
                                  }
                                else if (PIND & (1 << PD2))
                                {
                                  PORTB = 8;
  7e:	78 e0       	ldi	r23, 0x08	; 8
                             {
                               PORTB = 2;
                             }
                              else if (PIND & (1 << PD1))
                               {
                                  PORTB = 5;
  80:	55 e0       	ldi	r21, 0x05	; 5
              {
                PORTB = 9;
               }
                else if (PIND & (1 << PD3))
               {
                   PORTB = '#';
  82:	f3 e2       	ldi	r31, 0x23	; 35
             {
                PORTB = 6;
              }
               else if (PIND & (1 << PD2))
              {
                PORTB = 9;
  84:	69 e0       	ldi	r22, 0x09	; 9
           {
                PORTB = 3;
             }
              else if (PIND & (1 << PD1))
             {
                PORTB = 6;
  86:	46 e0       	ldi	r20, 0x06	; 6
                                    }
       
	     PORTC = 0b00000001;
         if (PIND & (1 <<0))
           {
                PORTB = 3;
  88:	33 e0       	ldi	r19, 0x03	; 3
    DDRC = 0b11111111; // Keypad Output
    DDRD = 0b00000000; // Keypad input

    while (1)
    {
        PORTC = 0b00000100;
  8a:	25 bb       	out	0x15, r18	; 21
        if (PIND & (1 << PD0))
  8c:	80 9b       	sbis	0x10, 0	; 16
  8e:	02 c0       	rjmp	.+4      	; 0x94 <main+0x28>
        {
            PORTB = 1;
  90:	98 bb       	out	0x18, r25	; 24
  92:	0a c0       	rjmp	.+20     	; 0xa8 <main+0x3c>
        }
        else if (PIND & (1 << PD1))
  94:	81 9b       	sbis	0x10, 1	; 16
  96:	02 c0       	rjmp	.+4      	; 0x9c <main+0x30>
        {
            PORTB = 4;
  98:	28 bb       	out	0x18, r18	; 24
  9a:	06 c0       	rjmp	.+12     	; 0xa8 <main+0x3c>
        }
        else if (PIND & (1 << PD2))
  9c:	82 9b       	sbis	0x10, 2	; 16
  9e:	02 c0       	rjmp	.+4      	; 0xa4 <main+0x38>
        {
            PORTB = 7;
  a0:	e8 bb       	out	0x18, r30	; 24
  a2:	02 c0       	rjmp	.+4      	; 0xa8 <main+0x3c>
        }
        else if (PIND & (1 << PD3))
  a4:	83 99       	sbic	0x10, 3	; 16
        {
            PORTB = '*';
  a6:	a8 bb       	out	0x18, r26	; 24
        }
		
		                     PORTC = 0b00000010;
  a8:	85 bb       	out	0x15, r24	; 21
                              if (PIND & (1 << PD0))
  aa:	80 9b       	sbis	0x10, 0	; 16
  ac:	02 c0       	rjmp	.+4      	; 0xb2 <main+0x46>
                             {
                               PORTB = 2;
  ae:	88 bb       	out	0x18, r24	; 24
  b0:	0a c0       	rjmp	.+20     	; 0xc6 <main+0x5a>
                             }
                              else if (PIND & (1 << PD1))
  b2:	81 9b       	sbis	0x10, 1	; 16
  b4:	02 c0       	rjmp	.+4      	; 0xba <main+0x4e>
                               {
                                  PORTB = 5;
  b6:	58 bb       	out	0x18, r21	; 24
  b8:	06 c0       	rjmp	.+12     	; 0xc6 <main+0x5a>
                                  }
                                else if (PIND & (1 << PD2))
  ba:	82 9b       	sbis	0x10, 2	; 16
  bc:	02 c0       	rjmp	.+4      	; 0xc2 <main+0x56>
                                {
                                  PORTB = 8;
  be:	78 bb       	out	0x18, r23	; 24
  c0:	02 c0       	rjmp	.+4      	; 0xc6 <main+0x5a>
                                 }
                                  else if (PIND & (1 << PD3))
  c2:	83 99       	sbic	0x10, 3	; 16
                                   {
                                      PORTB = 0;
  c4:	18 ba       	out	0x18, r1	; 24
                                    }
       
	     PORTC = 0b00000001;
  c6:	95 bb       	out	0x15, r25	; 21
         if (PIND & (1 <<0))
  c8:	80 9b       	sbis	0x10, 0	; 16
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <main+0x64>
           {
                PORTB = 3;
  cc:	38 bb       	out	0x18, r19	; 24
  ce:	dd cf       	rjmp	.-70     	; 0x8a <main+0x1e>
             }
              else if (PIND & (1 << PD1))
  d0:	81 9b       	sbis	0x10, 1	; 16
  d2:	02 c0       	rjmp	.+4      	; 0xd8 <main+0x6c>
             {
                PORTB = 6;
  d4:	48 bb       	out	0x18, r20	; 24
  d6:	d9 cf       	rjmp	.-78     	; 0x8a <main+0x1e>
              }
               else if (PIND & (1 << PD2))
  d8:	82 9b       	sbis	0x10, 2	; 16
  da:	02 c0       	rjmp	.+4      	; 0xe0 <main+0x74>
              {
                PORTB = 9;
  dc:	68 bb       	out	0x18, r22	; 24
  de:	d5 cf       	rjmp	.-86     	; 0x8a <main+0x1e>
               }
                else if (PIND & (1 << PD3))
  e0:	83 9b       	sbis	0x10, 3	; 16
  e2:	d3 cf       	rjmp	.-90     	; 0x8a <main+0x1e>
               {
                   PORTB = '#';
  e4:	f8 bb       	out	0x18, r31	; 24
  e6:	d1 cf       	rjmp	.-94     	; 0x8a <main+0x1e>

000000e8 <_exit>:
  e8:	f8 94       	cli

000000ea <__stop_program>:
  ea:	ff cf       	rjmp	.-2      	; 0xea <__stop_program>
